digraph "nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{nlohmann::basic_json\l\< ObjectType, ArrayType,\l StringType, BooleanType,\l NumberIntegerType, NumberUnsigned\lType, NumberFloatType, AllocatorType,\l JSONSerializer \>\n|- m_type\l|+ type_name()\l+ get_allocator()\l+ meta()\l- assert_invariant()\l- get_impl()\l- get_impl_ptr()\l- get_impl_ptr()\l- get_impl_ptr()\l- get_impl_ptr()\l- get_impl_ptr()\l- get_impl_ptr()\l- get_impl_ptr()\l- get_impl_ptr()\land 6 more...\l- create()\l- get_ref_impl()\l* exception\l* parse_error\l* invalid_iterator\l* type_error\l* out_of_range\l* other_error\l* value_type\l* reference\l* const_reference\l* difference_type\l* size_type\l* allocator_type\l* pointer\l* const_pointer\l* iterator\l* const_iterator\l* reverse_iterator\l* const_reverse_iterator\l* object_comparator_t\l* object_t\l* array_t\l* string_t\l* boolean_t\l* number_integer_t\l* number_unsigned_t\l* number_float_t\l* operator==\l* operator==\l* operator==\l* operator!=\l* operator!=\l* operator!=\l* operator\<\l* operator\<\l* operator\<\l* operator\<=\land 8 more...\l* operator\<\<\l* operator\>\>\l* operator\<\<\l* operator\>\>\l* parse()\l* accept()\l* sax_parse()\l* parse()\l* accept()\l* sax_parse()\l* array()\l* object()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* operator=()\l* ~basic_json()\l* iterator_wrapper()\l* iterator_wrapper()\l* begin()\l* begin()\l* cbegin()\l* end()\l* end()\l* cend()\l* rbegin()\l* rbegin()\land 6 more...\l* to_cbor()\l* to_cbor()\l* to_cbor()\l* to_msgpack()\l* to_msgpack()\l* to_msgpack()\l* to_ubjson()\l* to_ubjson()\l* to_ubjson()\l* to_bson()\land 10 more...\l* diff()\l* patch()\l* dump()\l* type()\l* is_primitive()\l* is_structured()\l* is_null()\l* is_boolean()\l* is_number()\l* is_number_integer()\l* is_number_unsigned()\l* is_number_float()\l* is_object()\l* is_array()\l* is_string()\l* is_discarded()\l* operator value_t()\l* get()\l* get()\l* get()\l* get()\l* get_to()\l* get_to()\l* get_ptr()\l* get_ptr()\l* get()\l* get()\l* get_ref()\l* get_ref()\l* operator ValueType()\l* at()\l* at()\l* at()\l* at()\l* operator[]()\l* operator[]()\l* operator[]()\l* operator[]()\l* operator[]()\l* operator[]()\land 12 more...\l* find()\l* find()\l* count()\l* contains()\l* contains()\l* empty()\l* size()\l* max_size()\l* clear()\l* push_back()\l* operator+=()\l* push_back()\l* operator+=()\l* push_back()\l* operator+=()\l* push_back()\l* operator+=()\l* emplace_back()\land 14 more...\l* operator[]()\l* operator[]()\l* at()\l* at()\l* flatten()\l* unflatten()\l* merge_patch()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="a class to store JSON values"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{nlohmann::basic_json\l\< ObjectType, ArrayType,\l StringType, BooleanType,\l NumberIntegerType, NumberUnsigned\lType, NumberFloatType, AllocatorType,\l JSONSerializer \>::json_value\n|+ object\l+ array\l+ string\l+ boolean\l+ number_integer\l+ number_unsigned\l+ number_float\l|+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ json_value()\l+ destroy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$unionnlohmann_1_1basic__json_1_1json__value.html",tooltip="a JSON value"];
}
